#!/usr/bin/perl -w

use strict;

use Text::CSV;
use DateTime;
use FileHandle;
use Getopt::Long;
use Pod::Usage;

use Carp;

my ($IN_SEPARATOR, $OUT_SEPARATOR) = (',', ',');
my ($HELP, $MAN);

GetOptions(
    'help|?'          => \$HELP,
    'man'             => \$MAN,
    'in-separator=s'   => \$IN_SEPARATOR,
    'out-separator=s'  => \$OUT_SEPARATOR
);

pod2usage(-exitstatus => 0, -verbose => 1) if $HELP;
pod2usage(-exitstatus => 0, -verbose => 2) if $MAN;

my ($SUPERSET_KEY, $SUPERSET_FILE, $SUBSET_KEY, $SUBSET_FILE) = @ARGV;

pod2usage(-exitstatus => 1, -verbose => 1) unless ($SUBSET_KEY);

my $CSV_IN  = Text::CSV->new({ binary => 1, sep_char => $IN_SEPARATOR });
my $CSV_OUT = Text::CSV->new({ binary => 1, sep_char => $OUT_SEPARATOR });

sub main() {
    my %superset_keys = ();
    process_csv($SUPERSET_FILE, \&build_superset_keys,
        [ $SUPERSET_KEY, \%superset_keys ]);

    process_csv($SUBSET_FILE, \&dump_bad_subset_line,
        [ $SUBSET_KEY, \%superset_keys ]);
}

sub process_csv($$$) {
    my ($file, $sub, $params) = @_;
    my $fh = $file
            ? new FileHandle($file, 'r')
            : *STDIN;
    croak "Cannot open '$file' for reading: $!" unless $fh;

    my @headers = @{ $CSV_IN->getline($fh) or croak "Cannot parse header line: $!" };
    $CSV_IN->column_names(@headers);         # Set column names for getline_hr ()
    until ($CSV_IN->eof) {
        my $hash = $CSV_IN->getline_hr($fh) or next;
        $sub->($hash, @$params);
    }

    close $fh if $file;
}

sub build_superset_keys($$$) {
    my ($hash, $key, $keys) = @_;
    $key = '' unless defined $key;
    my $value = defined $hash->{$key} ? $hash->{$key} : '';
    $keys->{$value} = 1;
}

sub dump_bad_subset_line($$$$) {
    my ($hash, $key, $sup_keys) = @_;
    die unless $key;
    warn "undefined hash->{$key}" unless defined $hash->{$key};
    unless (defined $sup_keys->{$hash->{$key}}) {
        printf("%s (line $.)\n", $hash->{$key});
    }
}

main();

__END__
=head1 NAME

check_mapping - referencial integrity checking tool. List values and line numbers
                of the input CSV that violate the specified referencial integrity
                constrain.

=head1 SYNOPSIS

 check_mapping [options] pk_column_name referenced_csv_file \
                         fk_column_name processed_csv_file
 check_mapping [options] fk_column_name referenced_csv_file \
                         pk_column_name < processed_csv_file

 Example:

 #
 # list 'Employee ID' values in salaries.csv that don't match a value of
 # 'ID' in employees.csv
 #
 check_mapping salaries.csv 'Employee ID' employees.csv 'ID'

=head1 OPTIONS

 --help, -h               short help screen
 --man                    slightly more detailed documentation
 --in-separator=char      field separator in the source file ("," by default)
 --out-separator=char     output field separator ("," by default)

=head1 AUTHORS

Pavel Kolesnikov <pavel@gooddata.com>

